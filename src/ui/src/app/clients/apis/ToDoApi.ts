/* tslint:disable */
/* eslint-disable */
/**
 * To Do App âœ…
 * Simple to do application for state management demo
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedToDoList,
  PatchedToDo,
  ToDo,
} from '../models/index';
import {
    PaginatedToDoListFromJSON,
    PaginatedToDoListToJSON,
    PatchedToDoFromJSON,
    PatchedToDoToJSON,
    ToDoFromJSON,
    ToDoToJSON,
} from '../models/index';

export interface TodosCreateRequest {
    toDo: ToDo;
}

export interface TodosDestroyRequest {
    toDoId: number;
}

export interface TodosListRequest {
    description?: string;
    dueDatetime?: Date;
    name?: string;
    owner?: number;
    page?: number;
    search?: string;
    toDoId?: number;
}

export interface TodosPartialUpdateRequest {
    toDoId: number;
    patchedToDo?: PatchedToDo;
}

export interface TodosRetrieveRequest {
    toDoId: number;
}

export interface TodosUpdateRequest {
    toDoId: number;
    toDo: ToDo;
}

/**
 * 
 */
export class ToDoApi extends runtime.BaseAPI {

    /**
     */
    async todosCreateRaw(requestParameters: TodosCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToDo>> {
        if (requestParameters.toDo === null || requestParameters.toDo === undefined) {
            throw new runtime.RequiredError('toDo','Required parameter requestParameters.toDo was null or undefined when calling todosCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/todos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToDoToJSON(requestParameters.toDo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToDoFromJSON(jsonValue));
    }

    /**
     */
    async todosCreate(requestParameters: TodosCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToDo> {
        const response = await this.todosCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async todosDestroyRaw(requestParameters: TodosDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.toDoId === null || requestParameters.toDoId === undefined) {
            throw new runtime.RequiredError('toDoId','Required parameter requestParameters.toDoId was null or undefined when calling todosDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/todos/{to_do_id}`.replace(`{${"to_do_id"}}`, encodeURIComponent(String(requestParameters.toDoId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async todosDestroy(requestParameters: TodosDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.todosDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async todosListRaw(requestParameters: TodosListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedToDoList>> {
        const queryParameters: any = {};

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.dueDatetime !== undefined) {
            queryParameters['due_datetime'] = (requestParameters.dueDatetime as any).toISOString();
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.owner !== undefined) {
            queryParameters['owner'] = requestParameters.owner;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.toDoId !== undefined) {
            queryParameters['to_do_id'] = requestParameters.toDoId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/todos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedToDoListFromJSON(jsonValue));
    }

    /**
     */
    async todosList(requestParameters: TodosListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedToDoList> {
        const response = await this.todosListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async todosPartialUpdateRaw(requestParameters: TodosPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToDo>> {
        if (requestParameters.toDoId === null || requestParameters.toDoId === undefined) {
            throw new runtime.RequiredError('toDoId','Required parameter requestParameters.toDoId was null or undefined when calling todosPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/todos/{to_do_id}`.replace(`{${"to_do_id"}}`, encodeURIComponent(String(requestParameters.toDoId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedToDoToJSON(requestParameters.patchedToDo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToDoFromJSON(jsonValue));
    }

    /**
     */
    async todosPartialUpdate(requestParameters: TodosPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToDo> {
        const response = await this.todosPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async todosRetrieveRaw(requestParameters: TodosRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToDo>> {
        if (requestParameters.toDoId === null || requestParameters.toDoId === undefined) {
            throw new runtime.RequiredError('toDoId','Required parameter requestParameters.toDoId was null or undefined when calling todosRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/todos/{to_do_id}`.replace(`{${"to_do_id"}}`, encodeURIComponent(String(requestParameters.toDoId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToDoFromJSON(jsonValue));
    }

    /**
     */
    async todosRetrieve(requestParameters: TodosRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToDo> {
        const response = await this.todosRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async todosUpdateRaw(requestParameters: TodosUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToDo>> {
        if (requestParameters.toDoId === null || requestParameters.toDoId === undefined) {
            throw new runtime.RequiredError('toDoId','Required parameter requestParameters.toDoId was null or undefined when calling todosUpdate.');
        }

        if (requestParameters.toDo === null || requestParameters.toDo === undefined) {
            throw new runtime.RequiredError('toDo','Required parameter requestParameters.toDo was null or undefined when calling todosUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/todos/{to_do_id}`.replace(`{${"to_do_id"}}`, encodeURIComponent(String(requestParameters.toDoId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ToDoToJSON(requestParameters.toDo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToDoFromJSON(jsonValue));
    }

    /**
     */
    async todosUpdate(requestParameters: TodosUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToDo> {
        const response = await this.todosUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
